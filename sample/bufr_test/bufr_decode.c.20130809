/**
* Copyright 1981-2012 ECMWF. 
* 
* This software is licensed under the terms of the GNU Lesser 
* General Public License Version 3 which can be obtained at 
* http://www.gnu.org/licenses/lgpl.html.  
* 
* In applying this licence, ECMWF does not waive the privileges 
* and immunities granted to it by virtue of its status as an 
* intergovernmental organisation nor does it submit to any
* jurisdiction. 
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define KVALS 4096000
#define KELEM 160000

int main(int argc, char *argv[])
/*******************************************************************
*                                                                 
* Program : Bufr_decode
*                                                              
*                                                             
* Author: Milan Dragosavac    ECMWF    July 1996
*  
* Purpose: Decode bufr message
* 
*
*
* Usage:
* 
*
*
* References:
*  
*
*
*
* File formats:
* 
*
*
* Restrictions:
*  
* 
* Error handling:
* 
*
*
* Notes:
* 
*
*
*******************************************************************/
{

  FILE *fp; 
//  char bufr_message[512000];
  char* bufr_message;//[512000];
//  char filename[256];
  char* filename;//[256];
  long int length=512000;
  long int status = 0;
  int  Nbpw;

  unsigned long int *kbuff;
  long int ksup[9];
  long int ksec0[3];
  long int ksec1[40];
//  long int ksec2[4096];
  long int* ksec2;//[4096];
  long int ksec3[4]; 
  long int ksec4[2];
  long int key[46];
  long int kerr;


 
  int i;
  long kelem = KELEM,kvals = KVALS;

//  static char cnames[KELEM][64],cunits[KELEM][24];
  static char** cnames;//[KELEM][64],
  static char** cunits;//[KELEM][24];
  

//  char cvals[KVALS][80];
  char** cvals;//[KVALS][80];

//  double values[KVALS],vals[KVALS];
  double* values;//[KVALS]
  double* vals;//[KVALS];
  long icode = 0;
//  long ktdlst[KELEM],ktdexp[KELEM],ktdlen,ktdexl;
  long* ktdlst;//[KELEM]
  long* ktdexp;//[KELEM]
  long ktdlen,ktdexl;
  
      long current_ss;
  /////////////////////////////////////////// user add
  long isubset =0;
  ///////////////////////////////////////////

    printf("start.....\n");
  
  bufr_message = (char*)malloc(sizeof(char)*512000);	// add
  filename = (char*)malloc(sizeof(char)*256);					// add
  ksec2 = (long int*)malloc(sizeof(long int)*4096);		// add

	cnames = (char **)malloc(KELEM * sizeof(char *));
	for (i = 0; i < KELEM; i++) {
		cnames[i] = (char *)malloc(64 * sizeof(char));
		memset(cnames[i], 0x00, sizeof(char)*64);
	}

	cunits = (char **)malloc(KELEM * sizeof(char *));
	for (i = 0; i < KELEM; i++) {
		cunits[i] = (char *)malloc(24 * sizeof(char));
		memset(cunits[i], 0x00, sizeof(char)*24);
	}

	cvals = (char **)malloc(KVALS * sizeof(char *));
	for (i = 0; i < KVALS; i++) {
		cvals[i] = (char *)malloc(80 * sizeof(char));
		memset(cvals[i], 0x00,  sizeof(char)*80);
	}
	
	values = (double*)malloc(KVALS * sizeof(double));
	vals = (double*)malloc(KVALS * sizeof(double));
	ktdlst = (long*)malloc(KELEM * sizeof(long));
	ktdexp = (long*)malloc(KELEM * sizeof(long));
	
	printf("malloc end \n");
	
	memset(bufr_message, 0x00, sizeof(bufr_message));
	memset(filename, 0x00, sizeof(filename));
	memset(ksec2, 0x00, sizeof(ksec2));
	memset(values, 0x00, sizeof(values));
	memset(vals, 0x00, sizeof(vals));
	memset(ktdlst, 0x00, sizeof(ktdlst));
	memset(ktdexp, 0x00, sizeof(ktdexp));
	
	printf("mem init \n");
	
 if(sizeof(long) == 4) Nbpw=32;
  else if(sizeof(long) == 8) Nbpw=64;
  else{
    printf("Abort.....\n");
  }

  printf("%d\n",Nbpw);

/*     Get input and output file name.  */
/*     -------------------------------  */  

  if(argc != 3) {
    printf("Usage: bufr_decode -i infile \n");
    printf("Please try again. \n");
    exit(1);
  }

  printf("%d",argc);

  if(!strcmp(argv[1],"-i")) strcpy(filename,argv[2]);
  else {
    printf("Usage: bufr_decode -i infile \n");
    exit(1);
  }
  printf("%s\n", filename);

/*     Open input file       */
/*     ---------------       */  

  if((fp = fopen(filename,"r")) == NULL) {
    printf("cannot open file\n");
    exit(1);
  }
  
/*     Read in bufr messages */
/*     --------------------- */  

  while(status >= 0){
  	/*
		memset(bufr_message, 0x00, sizeof(bufr_message));
		memset(filename, 0x00, sizeof(filename));
		memset(ksec2, 0x00, sizeof(ksec2));
		memset(values, 0x00, sizeof(values));
		memset(vals, 0x00, sizeof(vals));
		memset(ktdlst, 0x00, sizeof(ktdlst));
		memset(ktdexp, 0x00, sizeof(ktdexp));
		for (i = 0; i < KELEM; i++) memset(cnames[i], 0x00, sizeof(char)*64);
		for (i = 0; i < KELEM; i++) memset(cunits[i], 0x00, sizeof(char)*24);
		for (i = 0; i < KVALS; i++) memset(cvals[i], 0x00,  sizeof(char)*80);
*/

//      long current_ss;
//     status = readbufr( fp,&bufr_message,&length);
		 printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>status=%d,length=%d \n",status,length);
		 length=512000;
     status = readbufr( fp,bufr_message,&length);

		 printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>status=%d,length=%d \n",status,length);
     if(     status == -1 ) printf("End of file.\n");
     else if(status == -2 ) printf("Error in file handling\n");
     else if(status == -3 ) printf("Too small input array.\n");
     else if(status == -4 ) printf("Too small input array.\n");
     else {
       printf("It is OK.\n");
       printf("message read ");
       printf("%d\n",length);
       printf("%s\n",bufr_message);//&bufr_message[0]);
       printf("bufr_msg end\n");
     }
     //status=-1;

/*    Expand bufr message calling fortran program */
       kbuff = (unsigned long int*) bufr_message;
      length /= 4;

//      bus012_(&length, kbuff , ksup, ksec0, ksec1, ksec2,  &kerr) ;
      bus0123_(&length, kbuff , ksup, ksec0, ksec1, ksec2, ksec3,  &kerr) ;

      if (ksup[5] > 1)
        kelem = kvals/ksup[5];
      else
        kelem = KELEM;

      if ( kelem > KELEM ) kelem = KELEM;
      kerr = 0;
      bufrex_(&length,(long *)kbuff,ksup,ksec0,ksec1,ksec2,ksec3,ksec4,&kelem,(char **)cnames,(char **)cunits,&kvals,values,(char **)cvals,&kerr);
			printf("bufrex_ next\n");

      if ( kerr )
        {
          kerr = 0;
        }
      isubset = 1;
      busel2_(&isubset,&kelem, &ktdlen, ktdlst, &ktdexl, ktdexp, (char **)cnames, (char **)cunits, &kerr);
      
      
      printf("bus012_ %d\n", kerr);
      /* print section 0 */
      buprs0_(ksec0);
      
      /* print section 1 */
      buprs1_(ksec1);
      
			/* print section 2 */
      buukey_(ksec1,ksec2,key,ksup,&kerr);
      printf("buukey_ %d\n", kerr);
      buprs2_(ksup,key);
      
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////
			/* print section 3 */
      isubset = 1;
      busel2_(&isubset,&kelem, &ktdlen, ktdlst, &ktdexl, ktdexp, (char **)cnames, (char **)cunits, &kerr);
      buprs3_(ksec3,&ktdlen,ktdlst,&ktdexl,ktdexp,&kelem,(char **)cnames);
      ////////////////////////////////////////////////////////////////////////////////////////////////////////

			/* print section 4 */
      icode = 0;
      current_ss = 1;
      buprt_(&icode,&current_ss,&current_ss,&kelem,(char **)cnames,(char **)cunits,(char **)cvals,&kvals,values,ksup,ksec1,&kerr);
      printf("buprt_ %d\n", kerr);
			printf("buprt_ next\n");

      
  }

  return kerr;

}

